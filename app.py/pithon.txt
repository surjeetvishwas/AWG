from tkinter import *
from tkinter import messagebox
from helpfunctions import *
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np  # Eksik olan numpy import edildi

root = Tk()

root.title("Heater Tube Simulations") 
root.geometry("900x800")  # Width x Height
root.minsize(600, 800)
root.configure(background='#ed0fcf')


def CallBack():
    B.config(bg='green')
    
    # Veri giri?ini ve bo? de?er kontrol?n? y?netmek
    try:
        p1 = float(text_p1.get("1.0", "end-1c")) if text_p1.get("1.0", "end-1c") else 0
        v1 = float(text_v1.get("1.0", "end-1c")) if text_v1.get("1.0", "end-1c") else 0
        t1 = float(text_t1.get("1.0", "end-1c")) if text_t1.get("1.0", "end-1c") else 0
        rh = float(text_r1.get("1.0", "end-1c")) if text_r1.get("1.0", "end-1c") else 0
        p2 = float(text_p2.get("1.0", "end-1c")) if text_p2.get("1.0", "end-1c") else 0
        t2 = float(text_t2.get("1.0", "end-1c")) if text_t2.get("1.0", "end-1c") else 0
        p = float(text_p.get("1.0", "end-1c")) if text_p.get("1.0", "end-1c") else 0
        v = float(text_v.get("1.0", "end-1c")) if text_v.get("1.0", "end-1c") else 0
        t = float(text_t.get("1.0", "end-1c")) if text_t.get("1.0", "end-1c") else 0
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter valid numbers.")
        return

    try:
        results = flow_calc(p1, v1, t1, rh, t2, p2, p, v, t)
        y1_wat_vap, y1_dry_air, y2_wat_vap, y2_dry_air, m1, m2, m3, water_flow_rate,\
        water_condensed_per_hour, p1, v1, t1, rh, t2, p2 = results
        
        # Sonu?lar? yuvarlama
        water_condensed_per_hour = round(water_condensed_per_hour, 4)
        water_flow_rate = round(water_flow_rate, 4)
        y1_wat_vap = round(y1_wat_vap, 4)
        y1_dry_air = round(y1_dry_air, 4)
        y2_wat_vap = round(y2_wat_vap, 4)
        y2_dry_air = round(y2_dry_air, 4)
        m1 = round(m1, 4)
        m2 = round(m2, 4)
        m3 = round(m3, 4)

        # Etiketlere de?erleri ekleme
        masslabel.config(text=water_condensed_per_hour)
        watervol.config(text=water_flow_rate)
        watervapour1label.config(text=y1_wat_vap)
        dryairlabel1.config(text=y1_dry_air)
        watervapour2label.config(text=y2_wat_vap)
        dryairlabel2.config(text=y2_dry_air)
        m1label.config(text=m1)
        m2label.config(text=m2)
        m3label.config(text=m3)

    except Exception as e:
        messagebox.showerror("Calculation Error", str(e))


def onNightMode():
    try:
        # Sens?rden okuma (Bu ?rnek, sens?r?n ?al??t???n? varsayar)
        humidity, temperature = Adafruit_DHT.read_retry(11, 4)
        text_t1.insert(INSERT, temperature)
        text_r1.insert(INSERT, humidity)
    except:
        messagebox.showwarning("Hardware error", "Connect DHT11 Sensor")
    b.config(bg='green')


# ==================== GUI Elemanlar? ====================
# Inlet Conditions
Label(root, text="Inlet Conditions", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=10)
Label(root, text="Pressure (mmhg)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=30)
Label(root, text="Volume (m3/min)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=50)
Label(root, text="Temperature (celsius)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=70)
Label(root, text="Inlet Relative Humidity", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=90)

# Text Widgets for Input
text_p1 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_p1.place(x=170, y=30)
text_p1.insert(INSERT, 750)

text_v1 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_v1.place(x=170, y=50)
text_v1.insert(INSERT, 1)

text_t1 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_t1.place(x=170, y=70)
text_t1.insert(INSERT, 35)

text_r1 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_r1.place(x=170, y=90)
text_r1.insert(INSERT, 0.9)

b = Button(root, text="Get from sensor", relief="raised", bg="red", command=onNightMode)
b.place(x=220, y=70)
b.config(width=15, height=1, font=("Times New Roman", 11))


# STP Conditions
Label(root, text="STP Conditions", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=120)
Label(root, text="Pressure (mmhg)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=140)
Label(root, text="Volume (m3/min)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=160)
Label(root, text="Temperature (celsius)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=180)

# Text Widgets for STP Conditions
text_p = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_p.place(x=170, y=140)
text_p.insert(INSERT, 760)

text_v = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_v.place(x=170, y=160)
text_v.insert(INSERT, 22.4)

text_t = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_t.place(x=170, y=180)
text_t.insert(INSERT, 0)

# Outlet Conditions
Label(root, text="Outlet Conditions", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=220)
Label(root, text="Pressure (mmhg)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=240)
Label(root, text="Temperature (C)", width=20, height=1, font=("Times New Roman", 11)).place(x=0, y=260)

text_p2 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_p2.place(x=170, y=240)
text_p2.insert(INSERT, 755)

text_t2 = Text(root, width=5, height=1, font=("Times New Roman", 11))
text_t2.place(x=170, y=260)
text_t2.insert(INSERT, 27)

# Button to Calculate
B = Button(root, text="Click to calculate", relief="raised", bg="red", command=CallBack)
B.place(x=120, y=300)
B.config(width=15, height=2, font=("Times New Roman", 11))


# Sonu?lar? G?r?nt?lemek ??in Etiketler
Label(root, text="Condensed Water (kg/hour)", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=380)
masslabel = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
masslabel.place(x=300, y=380)

Label(root, text="Water Flow (L/min)", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=420)
watervol = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
watervol.place(x=300, y=420)

Label(root, text="Inlet Water Vapor Ratio", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=460)
watervapour1label = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
watervapour1label.place(x=300, y=460)

Label(root, text="Inlet Dry Air Ratio", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=500)
dryairlabel1 = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
dryairlabel1.place(x=300, y=500)

Label(root, text="Outlet Water Vapor Ratio", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=540)
watervapour2label = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
watervapour2label.place(x=300, y=540)

Label(root, text="Outlet Dry Air Ratio", width=25, height=1, font=("Times New Roman", 11)).place(x=0, y=580)
dryairlabel2 = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
dryairlabel2.place(x=300, y=580)

Label(root, text="m1", width=5, height=1, font=("Times New Roman", 11)).place(x=0, y=620)
m1label = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
m1label.place(x=100, y=620)

Label(root, text="m2", width=5, height=1, font=("Times New Roman", 11)).place(x=150, y=620)
m2label = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
m2label.place(x=200, y=620)

Label(root, text="m3", width=5, height=1, font=("Times New Roman", 11)).place(x=250, y=620)
m3label = Label(root, text="0", width=5, height=1, font=("Times New Roman", 11))
m3label.place(x=300, y=620)


def draw():
    """Grafi?i ?izme"""
    plt.close('all')  # Eski grafiklerden ka??nmak i?in t?m ?izimleri kapat
    fig, ax = plt.subplots(figsize=(5, 4))
    
    t = np.arange(0., 5., 0.2)
    ax.plot(t, t, 'r--', t, t*2, 'bs', t, t*3, 'g^')

    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    canvas.get_tk_widget().pack()

draw()
root.mainloop()
